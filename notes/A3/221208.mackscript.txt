This fullstack application was programmed by a team of three.
Philippe was the one responsible for designing the React Leaflet which allows us for easy and convenient displaying of the crime heatmap. Piyush designed our current Flask backend and decided on the schema we used. Mack was responsible for implementing multiselection, unit testing, and GitHub Actions.

Unfortunately, our program is liable to certain problems, especially that regarding the performance and handling irregular databases. We did make unit tests, in which the acceptance criteria is tat the info from the frontend, displayed, matches exactly those on the backend or database including the attributes. All required element have been correctly displayed.

Right now, the Map page only performs the fetch once you selected a new dataset. Datasets may be up to thousands of entries long, and each entry can involve a polygon up to thousands of points long. This may slow down or application since each time we load a dataset, that said dataset is stored on the front end, and only discarded and replaced once we select a new dataset. We can speed up lloading but that requires making backend calls each time per zoom or pan.

More concerning is that we could not implement automatic database generation. With over 150 fields, generating all data for each city will require multiple calls, and each of them may have to require individual method. Thus, to simplify for A3, all uploads will involve uploading CSV files of a certain format, and handling cases when fields or values are missing for nonconforming CSV. Moreover, generating the DB from the CSV always takes a few seconds since the GeoJSON data is later generated, and may be subject to API call limits. Thus, DBs are stored locally in the cache.

As a solution, we decided to meet regularly every weekend at an agreed time. If someone has to defer, we agree to defer via Discord communication. Issues are tracked on GitHub. Detailed notes are taken with one team member always writing tne notes during discussion.
